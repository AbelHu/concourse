---

templates:
  - &setup-config
    task: setup-config
    params: &setup-config-params
      ACCESS_TOKEN: {{digitalocean-access-token}}

      SSH_USER: {{digitalocean-ssh-user}}
      SSH_KEY: {{digitalocean-ssh-key}}

      REGION: sfo1
      IMAGE: ""
      SIZE: 1gb
      PRIVATE_NETWORKING: 'false'
      BACKUPS_ENABLED: 'false'
      IP6: 'false'
      OS: ""

    config:
      platform: linux

      image_resource:
        type: docker-image
        source:
          repository: ruby
          tag: '2.1'

      outputs:
      - name: keys
      - name: config

      run:
        path: bash
        args:
        - -c
        - |
          set -e

          echo "writing ssh key"
          cat <<EOF > keys/id_rsa
          $SSH_KEY
          EOF

          echo "chmodding ssh key"
          chmod 0600 keys/id_rsa

          echo "creating pub key"
          ssh-keygen -y -f keys/id_rsa > keys/id_rsa.pub

          fingerprint=$(ssh-keygen -lf keys/id_rsa.pub | cut -d' ' -f2)

          echo "writing .tugboat"
          cat << EOF > config/.tugboat
          ---
          authentication:
            access_token: $ACCESS_TOKEN
          ssh:
            ssh_user: $SSH_USER
            ssh_key_path: keys/id_rsa
            ssh_port: '22'
          defaults:
            region: $REGION
            image: $IMAGE
            size: $SIZE
            ssh_key: ["$fingerprint"]
            private_networking: $PRIVATE_NETWORKING
            backups_enabled: $BACKUPS_ENABLED
            ip6: $IP6
          EOF

  - &create-instance
    task: create-instance
    params: &create-instance-params
      OS: ""

    config:
      platform: linux

      image_resource:
        type: docker-image
        source:
          repository: ruby
          tag: '2.1'

      inputs:
      - name: config
      - name: keys

      outputs:
      - name: instance

      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          cp config/.tugboat .

          gem install tugboat

          tugboat create smoke-test-$OS
          trap "tugboat destroy --confirm smoke-test-$OS" ERR TERM INT

          tugboat wait smoke-test-$OS

          tugboat info smoke-test-$OS | grep IP | awk '{print $NF}' > instance/ip

          ip=$(cat instance/ip)

          until ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "exit 0"; do
            echo "waiting for ssh to become available..."
            sleep 1
          done

  - &teardown-instance
    task: teardown
    params: &teardown-instance-params
      OS: ""

    config:
      platform: linux

      image_resource:
        type: docker-image
        source:
          repository: ruby
          tag: '2.1'

      inputs:
      - name: config

      run:
        path: bash
        args:
        - -c
        - |
          gem install tugboat

          cp config/.tugboat .

          tugboat destroy --confirm smoke-test-$OS


  - &test-binary
    task: test-binary
    params: &test-binary-params
      OS: ""
      PING_SUCCESS: ""

    config:
      platform: linux

      image_resource:
        type: docker-image
        source:
          repository: ruby
          tag: '2.1'

      inputs:
      - name: bin-rc
      - name: keys
      - name: instance

      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ip=$(cat instance/ip)

          until scp -q -i keys/id_rsa -o StrictHostKeyChecking=no bin-rc/concourse_linux_amd64 root@${ip}:concourse; do
            echo "waiting for ssh to become available..."
            sleep 1
          done

          ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "chmod +x concourse"

          cat <<"EOC" > smoke_test
          set -ex

          # ssh
          ssh-keygen -t rsa -f host_key -N ''
          ssh-keygen -t rsa -f worker_key -N ''
          ssh-keygen -t rsa -f session_signing_key -N ''

          cp worker_key.pub authorized_worker_keys

          # bin
          set +x
          echo "starting web"
          ./concourse web \
            --development-mode \
            --session-signing-key session_signing_key \
            --tsa-host-key host_key \
            --tsa-authorized-keys authorized_worker_keys > web.stdout.log 2> web.stderr.log &

          # try to connect to 127.0.0.1:8080 and send nothing
          until [ $(2>/dev/null >/dev/tcp/127.0.0.1/8080 && echo 0 || echo 42) -eq 0 ]; do
            echo "waiting for atc to become available..."
            sleep 1
          done

          wget -q -O fly "http://127.0.0.1:8080/api/v1/cli?arch=amd64&platform=linux"

          echo "starting worker"
          ./concourse worker \
            --work-dir /tmp/worker \
            --tsa-host 127.0.0.1 \
            --tsa-public-key host_key.pub \
            --tsa-worker-private-key worker_key \
            --garden-network-pool 10.255.0.0/22 > worker.stdout.log 2> worker.stderr.log &

          until [ $(curl -s http://127.0.0.1:8080/api/v1/workers | wc -c) -gt 3 ]; do
            echo "waiting for worker to become available..."
            sleep 1
          done

          chmod +x fly
          ./fly -t local login -c http://127.0.0.1:8080

          # task
          cat << EOF > task.yml
          ---
          platform: linux

          image_resource:
            type: docker-image
            source:
              repository: busybox

          run:
            path: sh
            args:
            - -c
            - "echo hi"
          EOF

          # Unprivileged
          ./fly -t local execute -c task.yml

          # Privileged
          ./fly -t local execute -p -c task.yml

          # Cleanup; we won't get here unless executes succeed due to set -e
          killall concourse
          EOC

          echo "copying smoke_test to target"
          scp -q -i keys/id_rsa -o StrictHostKeyChecking=no smoke_test root@${ip}:

          echo "invoking smoke_test"
          ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "chmod +x smoke_test; ./smoke_test"
          ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "tar cvfz worker-web-logs.tgz *.log"
          scp -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip}:worker-web-logs.tgz .

resources:
- name: bin-rc
  type: github-release
  source:
    user: concourse
    repository: bin
    access_token: {{bin-release-token}}

jobs:
- name: digitalocean-centos-7

- name: digitalocean-ubuntu-xenial
  serial: true
  plan:
  - get: bin-rc
    params:
      globs:
      - concourse_linux_amd64

  - <<: *setup-config
    params:
      <<: *setup-config-params
      IMAGE: ubuntu-16-04-x64
      OS: ubuntu


  - <<: *create-instance
    params:
      <<: *create-instance-params
      OS: ubuntu


  - ensure:
      <<: *teardown-instance
      params:
        <<: *teardown-instance-params
        OS: ubuntu

    do:
    - task: install-postgres
      params:
        OS: 'ubuntu'

      config:
        platform: linux

        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.1'

        inputs:
        - name: keys
        - name: instance

        run:
          path: bash
          args:
          - -c
          - |
            cat <<"EOC" > install_postgres
            set -ex

            until apt-get update; do
              echo "waiting for apt lock"
              sleep 1
            done

            until apt-get -y install postgresql; do
              echo "waiting for apt lock"
              sleep 1
            done

            sudo -Hiu postgres psql -U postgres postgres <<EOF
              CREATE USER root SUPERUSER PASSWORD '' ;
            EOF

            createdb atc
            EOC

            ip=$(cat instance/ip)

            scp -q -i keys/id_rsa -o StrictHostKeyChecking=no install_postgres root@${ip}:
            ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "chmod +x install_postgres && ./install_postgres"

    - <<: *test-binary
      params:
        <<: *test-binary-params
        OS: ubuntu
        PING_SUCCESS: "nc -w 1 -v 127.0.0.1 8080"

- name: digitalocean-fedora-23
  serial: true
  plan:
  - get: bin-rc
    params:
      globs:
      - concourse_linux_amd64

  - <<: *setup-config
    params:
      <<: *setup-config-params
      IMAGE: fedora-23-x64
      OS: fedora

  - <<: *create-instance
    params:
      <<: *create-instance-params
      OS: fedora

  - ensure:
      <<: *teardown-instance
      params:
        <<: *teardown-instance-params
        OS: fedora

    do:
    - task: fedora-dependencies

      config:
        platform: linux

        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.1'

        inputs:
        - name: keys
        - name: instance

        run:
          path: bash
          args:
          - -c
          - |
            cat <<EOC > install_deps
            set -ex

            export LANG=en_US.UTF-8
            export LC_ALL=en_US.UTF-8

            echo "%_install_langs all" > /etc/rpm/macros.image-language-conf
            dnf reinstall -y glibc-common
            dnf upgrade -y glibc glibc-common

            dnf install -y tcping wget psmisc
            EOC

            ip=$(cat instance/ip)

            scp -q -i keys/id_rsa -o StrictHostKeyChecking=no install_deps root@${ip}:
            ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "chmod +x install_deps && ./install_deps"

    - task: install-postgres
      params:
        OS: 'fedora'

      config:
        platform: linux

        image_resource:
          type: docker-image
          source:
            repository: ruby
            tag: '2.1'

        inputs:
        - name: keys
        - name: instance

        run:
          path: bash
          args:
          - -c
          - |
            cat <<"EOC" > install_postgres
            set -ex

            dnf install -y postgresql-server postgresql
            postgresql-setup --initdb --unit postgresql

            echo "local all all peer" > /var/lib/pgsql/data/pg_hba.conf
            echo "host all all 127.0.0.1/32 trust" >> /var/lib/pgsql/data/pg_hba.conf

            systemctl start postgresql

            sudo -Hiu postgres psql -U postgres postgres <<EOF
              CREATE USER root SUPERUSER PASSWORD '' ;
            EOF

            createdb atc
            EOC

            ip=$(cat instance/ip)

            scp -q -i keys/id_rsa -o StrictHostKeyChecking=no install_postgres root@${ip}:
            ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no root@${ip} "chmod +x install_postgres && ./install_postgres"

    - <<: *test-binary
      params:
        <<: *test-binary-params
        OS: fedora
        PING_SUCCESS: "tcping -t 1 127.0.0.1 8080"
